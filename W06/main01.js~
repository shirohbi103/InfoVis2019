function main()
{
    var width = 500;
    var height = 500;

    var scene = new THREE.Scene();

    var fov = 45;
    var aspect = width / height;
    var near = 1;
    var far = 1000;
    var camera = new THREE.PerspectiveCamera( fov, aspect, near, far );
    camera.position.set( 0, 0, 5 );
    scene.add( camera );

    var light = new THREE.PointLight();
    light.position.set( 5, 5, 5 );
    scene.add( light );

    var renderer = new THREE.WebGLRenderer();
    renderer.setSize( width, height );
    document.body.appendChild( renderer.domElement );

    var geometry = new THREE.TorusKnotGeometry( 1, 0.3, 100, 20 );
    // var material = new THREE.MeshLambertMaterial();
    var material = new THREE.ShaderMaterial({
	vertexColors: THREE.VertexColors,
		vertexShader: document.getElementById('gouraud.vert').text,
	fragmentShader: document.getElementById('gouraud.frag').text,
	uniforms: {
	    light_position: { type: 'v3', value: light.position }
	}
    });

    var torus_knot = new THREE.Mesh( geometry, material );
    scene.add( torus_knot );

    loop();

    function loop()
    {
        requestAnimationFrame( loop );
        torus_knot.rotation.x += 0.11;
        torus_knot.rotation.y += 0.11;
        renderer.render( scene, camera );
    }
}

/*
function LambertianReflection(C,  L, N )
{
     var ka = 0.4;
 var kd = 0.6;
 var dd = max( dot( N, L ), 0.0 );
  var Ia = ka;
  var Id = kd * dd;
return C * ( Ia + Id );
}

function  PhongReflection(C, L, N )
{
  var ka = 0.3;
  var kd = 0.5;
  var ks = 0.8;
  var n = 50.0;
 var R = reflect( -L, N );
 var dd = max( dot( N, L ), 0.0 );
 var ds = pow( max( dot( R, V ), 0.0 ), n );
if ( dd <= 0.0 ) { ds = 0.0; }
 var Ia = ka;
 var Id = kd * dd;
 var Is = ks * ds;
return C * ( Ia + Id + Is );
}
*/

