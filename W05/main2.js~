function main()
{
    var width = 500;
    var height = 500;

    var scene = new THREE.Scene();

    
    var fov = 45;
    var aspect = width / height;
    var near = 1;
    var far = 1000;
    var camera = new THREE.PerspectiveCamera( fov, aspect, near, far );
    camera.position.set( 0, 0, 5 );
    scene.add( camera );



    var renderer = new THREE.WebGLRenderer();
    renderer.setSize( width, height );
    document.body.appendChild( renderer.domElement );
    

  //  var geometry = new THREE.BoxGeometry( 1, 1, 1 );
   // var material = new THREE.MeshBasicMaterial( { color: 0xffffff } );
   // var cube = new THREE.Mesh( geometry, material );
  //  scene.add( cube );

    var geometry = new THREE.Geometry();

//頂点座標データを追加   
geometry.vertices[0] = new THREE.Vector3(1,0,1);
geometry.vertices[1] = new THREE.Vector3(0,1,1);
geometry.vertices[2] = new THREE.Vector3(0,0,1);
geometry.vertices[3] = new THREE.Vector3(1,1,1);

geometry.vertices[4] = new THREE.Vector3(1,0,2);
geometry.vertices[5] = new THREE.Vector3(0,1,2);
geometry.vertices[6] = new THREE.Vector3(0,0,2);
geometry.vertices[7] = new THREE.Vector3(1,1,2);
    
    
//面指定用頂点インデックスを追加   
    geometry.faces[0] = new THREE.Face3(0,1,2);
    geometry.faces[1] = new THREE.Face3(0,1,3);
    geometry.faces[2] = new THREE.Face3(4,5,6);
    geometry.faces[3] = new THREE.Face3(4,5,7);
    
    geometry.faces[4] = new THREE.Face3(3,5,7);
    geometry.faces[5] = new THREE.Face3(1,3,5);
    geometry.faces[6] = new THREE.Face3(2,0,6);
    geometry.faces[7] = new THREE.Face3(0,6,4);

    geometry.faces[8] = new THREE.Face3(0,3,4);
    geometry.faces[9] = new THREE.Face3(3,4,7);
    geometry.faces[10] = new THREE.Face3(2,1,6);
    geometry.faces[11] = new THREE.Face3(1,6,5);

    //lighting
    geometry.computeFaceNormals();
//マテリアル（材質）の宣言と生成
    var material =  new THREE.MeshBasicMaterial({ color: 0x00ffb0 });
    material.side = THREE.DoubleSide;
var Cube =  new THREE.Mesh(geometry,material);

//シーンオブジェクトに追加 
scene.add(Cube);     

document.addEventListener( 'mousedown', mouse_down_event );
function mouse_down_event( event )
{
// Mouse picking
    var raycaster = new THREE.Raycaster( origin, direction );
    var intersects = raycaster.intersectObject( triangle );
    if ( intersects.length > 0 )
    {
	intersects[0].face.color.setRGB( 1, 0, 0 );
	intersects[0].object.geometry.colorsNeedUpdate = true;
    }
}
    
    loop();

    function loop()
    {
        requestAnimationFrame( loop );
        Cube.rotation.x += 0.008;
        Cube.rotation.y += 0.008;
        renderer.render( scene, camera );
    }

}
